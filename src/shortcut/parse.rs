use winit::keyboard::{Key, KeyCode};

pub fn parse_key(text: &str) -> Option<Key> {
    let key = match text {
        "alt" => Key::Alt,
        "altgraph" => Key::AltGraph,
        "capslock" => Key::CapsLock,
        "control" | "ctrl" => Key::Control,
        "fn" => Key::Fn,
        "fnlock" => Key::FnLock,
        "numlock" => Key::NumLock,
        "scrolllock" => Key::ScrollLock,
        "shift" => Key::Shift,
        "symbol" => Key::Symbol,
        "symbollock" => Key::SymbolLock,
        "meta" => Key::Meta,
        "hyper" => Key::Hyper,
        "super" => Key::Super,
        "enter" => Key::Enter,
        "tab" => Key::Tab,
        "space" => Key::Space,
        "arrowdown" | "down" => Key::ArrowDown,
        "arrowleft" | "left" => Key::ArrowLeft,
        "arrowright" | "right" => Key::ArrowRight,
        "arrowup" | "up" => Key::ArrowUp,
        "end" => Key::End,
        "home" => Key::Home,
        "pagedown" | "pgdown" => Key::PageDown,
        "pageup" | "pgup" => Key::PageUp,
        "backspace" => Key::Backspace,
        "clear" => Key::Clear,
        "copy" => Key::Copy,
        "crsel" => Key::CrSel,
        "cut" => Key::Cut,
        "delete" => Key::Delete,
        "eraseeof" => Key::EraseEof,
        "exsel" => Key::ExSel,
        "insert" => Key::Insert,
        "paste" => Key::Paste,
        "redo" => Key::Redo,
        "undo" => Key::Undo,
        "accept" => Key::Accept,
        "again" => Key::Again,
        "attn" => Key::Attn,
        "cancel" => Key::Cancel,
        "contextmenu" => Key::ContextMenu,
        "escape" => Key::Escape,
        "execute" => Key::Execute,
        "find" => Key::Find,
        "help" => Key::Help,
        "pause" => Key::Pause,
        "play" => Key::Play,
        "props" => Key::Props,
        "select" => Key::Select,
        "zoomin" => Key::ZoomIn,
        "zoomout" => Key::ZoomOut,
        "brightnessdown" => Key::BrightnessDown,
        "brightnessup" => Key::BrightnessUp,
        "eject" => Key::Eject,
        "logoff" => Key::LogOff,
        "power" => Key::Power,
        "poweroff" => Key::PowerOff,
        "printscreen" => Key::PrintScreen,
        "hibernate" => Key::Hibernate,
        "standby" => Key::Standby,
        "wakeup" => Key::WakeUp,
        "allcandidates" => Key::AllCandidates,
        "alphanumeric" => Key::Alphanumeric,
        "codeinput" => Key::CodeInput,
        "compose" => Key::Compose,
        "convert" => Key::Convert,
        "finalmode" => Key::FinalMode,
        "groupfirst" => Key::GroupFirst,
        "grouplast" => Key::GroupLast,
        "groupnext" => Key::GroupNext,
        "groupprevious" => Key::GroupPrevious,
        "modechange" => Key::ModeChange,
        "nextcandidate" => Key::NextCandidate,
        "nonconvert" => Key::NonConvert,
        "previouscandidate" => Key::PreviousCandidate,
        "process" => Key::Process,
        "singlecandidate" => Key::SingleCandidate,
        "hangulmode" => Key::HangulMode,
        "hanjamode" => Key::HanjaMode,
        "junjamode" => Key::JunjaMode,
        "eisu" => Key::Eisu,
        "hankaku" => Key::Hankaku,
        "hiragana" => Key::Hiragana,
        "hiraganakatakana" => Key::HiraganaKatakana,
        "kanamode" => Key::KanaMode,
        "kanjimode" => Key::KanjiMode,
        "katakana" => Key::Katakana,
        "romaji" => Key::Romaji,
        "zenkaku" => Key::Zenkaku,
        "zenkakuhankaku" => Key::ZenkakuHankaku,
        "soft1" => Key::Soft1,
        "soft2" => Key::Soft2,
        "soft3" => Key::Soft3,
        "soft4" => Key::Soft4,
        "channeldown" => Key::ChannelDown,
        "channelup" => Key::ChannelUp,
        "close" => Key::Close,
        "mailforward" => Key::MailForward,
        "mailreply" => Key::MailReply,
        "mailsend" => Key::MailSend,
        "mediaclose" => Key::MediaClose,
        "mediafastforward" => Key::MediaFastForward,
        "mediapause" => Key::MediaPause,
        "mediaplay" => Key::MediaPlay,
        "mediaplaypause" => Key::MediaPlayPause,
        "mediarecord" => Key::MediaRecord,
        "mediarewind" => Key::MediaRewind,
        "mediastop" => Key::MediaStop,
        "mediatracknext" => Key::MediaTrackNext,
        "mediatrackprevious" => Key::MediaTrackPrevious,
        "new" => Key::New,
        "open" => Key::Open,
        "print" => Key::Print,
        "save" => Key::Save,
        "spellcheck" => Key::SpellCheck,
        "key11" => Key::Key11,
        "key12" => Key::Key12,
        "audiobalanceleft" => Key::AudioBalanceLeft,
        "audiobalanceright" => Key::AudioBalanceRight,
        "audiobassboostdown" => Key::AudioBassBoostDown,
        "audiobassboosttoggle" => Key::AudioBassBoostToggle,
        "audiobassboostup" => Key::AudioBassBoostUp,
        "audiofaderfront" => Key::AudioFaderFront,
        "audiofaderrear" => Key::AudioFaderRear,
        "audiosurroundmodenext" => Key::AudioSurroundModeNext,
        "audiotrebledown" => Key::AudioTrebleDown,
        "audiotrebleup" => Key::AudioTrebleUp,
        "audiovolumedown" => Key::AudioVolumeDown,
        "audiovolumeup" => Key::AudioVolumeUp,
        "audiovolumemute" => Key::AudioVolumeMute,
        "microphonetoggle" => Key::MicrophoneToggle,
        "microphonevolumedown" => Key::MicrophoneVolumeDown,
        "microphonevolumeup" => Key::MicrophoneVolumeUp,
        "microphonevolumemute" => Key::MicrophoneVolumeMute,
        "speechcorrectionlist" => Key::SpeechCorrectionList,
        "speechinputtoggle" => Key::SpeechInputToggle,
        "launchapplication1" => Key::LaunchApplication1,
        "launchapplication2" => Key::LaunchApplication2,
        "launchcalendar" => Key::LaunchCalendar,
        "launchcontacts" => Key::LaunchContacts,
        "launchmail" => Key::LaunchMail,
        "launchmediaplayer" => Key::LaunchMediaPlayer,
        "launchmusicplayer" => Key::LaunchMusicPlayer,
        "launchphone" => Key::LaunchPhone,
        "launchscreensaver" => Key::LaunchScreenSaver,
        "launchspreadsheet" => Key::LaunchSpreadsheet,
        "launchwebbrowser" => Key::LaunchWebBrowser,
        "launchwebcam" => Key::LaunchWebCam,
        "launchwordprocessor" => Key::LaunchWordProcessor,
        "browserback" => Key::BrowserBack,
        "browserfavorites" => Key::BrowserFavorites,
        "browserforward" => Key::BrowserForward,
        "browserhome" => Key::BrowserHome,
        "browserrefresh" => Key::BrowserRefresh,
        "browsersearch" => Key::BrowserSearch,
        "browserstop" => Key::BrowserStop,
        "appswitch" => Key::AppSwitch,
        "call" => Key::Call,
        "camera" => Key::Camera,
        "camerafocus" => Key::CameraFocus,
        "endcall" => Key::EndCall,
        "goback" => Key::GoBack,
        "gohome" => Key::GoHome,
        "headsethook" => Key::HeadsetHook,
        "lastnumberredial" => Key::LastNumberRedial,
        "notification" => Key::Notification,
        "mannermode" => Key::MannerMode,
        "voicedial" => Key::VoiceDial,
        "tv" => Key::TV,
        "tv3dmode" => Key::TV3DMode,
        "tvantennacable" => Key::TVAntennaCable,
        "tvaudiodescription" => Key::TVAudioDescription,
        "tvaudiodescriptionmixdown" => Key::TVAudioDescriptionMixDown,
        "tvaudiodescriptionmixup" => Key::TVAudioDescriptionMixUp,
        "tvcontentsmenu" => Key::TVContentsMenu,
        "tvdataservice" => Key::TVDataService,
        "tvinput" => Key::TVInput,
        "tvinputcomponent1" => Key::TVInputComponent1,
        "tvinputcomponent2" => Key::TVInputComponent2,
        "tvinputcomposite1" => Key::TVInputComposite1,
        "tvinputcomposite2" => Key::TVInputComposite2,
        "tvinputhdmi1" => Key::TVInputHDMI1,
        "tvinputhdmi2" => Key::TVInputHDMI2,
        "tvinputhdmi3" => Key::TVInputHDMI3,
        "tvinputhdmi4" => Key::TVInputHDMI4,
        "tvinputvga1" => Key::TVInputVGA1,
        "tvmediacontext" => Key::TVMediaContext,
        "tvnetwork" => Key::TVNetwork,
        "tvnumberentry" => Key::TVNumberEntry,
        "tvpower" => Key::TVPower,
        "tvradioservice" => Key::TVRadioService,
        "tvsatellite" => Key::TVSatellite,
        "tvsatellitebs" => Key::TVSatelliteBS,
        "tvsatellitecs" => Key::TVSatelliteCS,
        "tvsatellitetoggle" => Key::TVSatelliteToggle,
        "tvterrestrialanalog" => Key::TVTerrestrialAnalog,
        "tvterrestrialdigital" => Key::TVTerrestrialDigital,
        "tvtimer" => Key::TVTimer,
        "avrinput" => Key::AVRInput,
        "avrpower" => Key::AVRPower,
        "colorf0red" => Key::ColorF0Red,
        "colorf1green" => Key::ColorF1Green,
        "colorf2yellow" => Key::ColorF2Yellow,
        "colorf3blue" => Key::ColorF3Blue,
        "colorf4grey" => Key::ColorF4Grey,
        "colorf5brown" => Key::ColorF5Brown,
        "closedcaptiontoggle" => Key::ClosedCaptionToggle,
        "dimmer" => Key::Dimmer,
        "displayswap" => Key::DisplaySwap,
        "dvr" => Key::DVR,
        "exit" => Key::Exit,
        "favoriteclear0" => Key::FavoriteClear0,
        "favoriteclear1" => Key::FavoriteClear1,
        "favoriteclear2" => Key::FavoriteClear2,
        "favoriteclear3" => Key::FavoriteClear3,
        "favoriterecall0" => Key::FavoriteRecall0,
        "favoriterecall1" => Key::FavoriteRecall1,
        "favoriterecall2" => Key::FavoriteRecall2,
        "favoriterecall3" => Key::FavoriteRecall3,
        "favoritestore0" => Key::FavoriteStore0,
        "favoritestore1" => Key::FavoriteStore1,
        "favoritestore2" => Key::FavoriteStore2,
        "favoritestore3" => Key::FavoriteStore3,
        "guide" => Key::Guide,
        "guidenextday" => Key::GuideNextDay,
        "guidepreviousday" => Key::GuidePreviousDay,
        "info" => Key::Info,
        "instantreplay" => Key::InstantReplay,
        "link" => Key::Link,
        "listprogram" => Key::ListProgram,
        "livecontent" => Key::LiveContent,
        "lock" => Key::Lock,
        "mediaapps" => Key::MediaApps,
        "mediaaudiotrack" => Key::MediaAudioTrack,
        "medialast" => Key::MediaLast,
        "mediaskipbackward" => Key::MediaSkipBackward,
        "mediaskipforward" => Key::MediaSkipForward,
        "mediastepbackward" => Key::MediaStepBackward,
        "mediastepforward" => Key::MediaStepForward,
        "mediatopmenu" => Key::MediaTopMenu,
        "navigatein" => Key::NavigateIn,
        "navigatenext" => Key::NavigateNext,
        "navigateout" => Key::NavigateOut,
        "navigateprevious" => Key::NavigatePrevious,
        "nextfavoritechannel" => Key::NextFavoriteChannel,
        "nextuserprofile" => Key::NextUserProfile,
        "ondemand" => Key::OnDemand,
        "pairing" => Key::Pairing,
        "pinpdown" => Key::PinPDown,
        "pinpmove" => Key::PinPMove,
        "pinptoggle" => Key::PinPToggle,
        "pinpup" => Key::PinPUp,
        "playspeeddown" => Key::PlaySpeedDown,
        "playspeedreset" => Key::PlaySpeedReset,
        "playspeedup" => Key::PlaySpeedUp,
        "randomtoggle" => Key::RandomToggle,
        "rclowbattery" => Key::RcLowBattery,
        "recordspeednext" => Key::RecordSpeedNext,
        "rfbypass" => Key::RfBypass,
        "scanchannelstoggle" => Key::ScanChannelsToggle,
        "screenmodenext" => Key::ScreenModeNext,
        "settings" => Key::Settings,
        "splitscreentoggle" => Key::SplitScreenToggle,
        "stbinput" => Key::STBInput,
        "stbpower" => Key::STBPower,
        "subtitle" => Key::Subtitle,
        "teletext" => Key::Teletext,
        "videomodenext" => Key::VideoModeNext,
        "wink" => Key::Wink,
        "zoomtoggle" => Key::ZoomToggle,
        "f1" => Key::F1,
        "f2" => Key::F2,
        "f3" => Key::F3,
        "f4" => Key::F4,
        "f5" => Key::F5,
        "f6" => Key::F6,
        "f7" => Key::F7,
        "f8" => Key::F8,
        "f9" => Key::F9,
        "f10" => Key::F10,
        "f11" => Key::F11,
        "f12" => Key::F12,
        "f13" => Key::F13,
        "f14" => Key::F14,
        "f15" => Key::F15,
        "f16" => Key::F16,
        "f17" => Key::F17,
        "f18" => Key::F18,
        "f19" => Key::F19,
        "f20" => Key::F20,
        "f21" => Key::F21,
        "f22" => Key::F22,
        "f23" => Key::F23,
        "f24" => Key::F24,
        "f25" => Key::F25,
        "f26" => Key::F26,
        "f27" => Key::F27,
        "f28" => Key::F28,
        "f29" => Key::F29,
        "f30" => Key::F30,
        "f31" => Key::F31,
        "f32" => Key::F32,
        "f33" => Key::F33,
        "f34" => Key::F34,
        "f35" => Key::F35,
        _ => return None,
    };
    Some(key)
}

pub fn parse_keycode(text: &str) -> Option<KeyCode> {
    let key = match text {
        "backquote" | "`" => KeyCode::Backquote,
        "backslash" | r"\" => KeyCode::Backslash,
        "bracketleft" | "[" => KeyCode::BracketLeft,
        "bracketright" | "]" => KeyCode::BracketRight,
        "comma" | "," => KeyCode::Comma,
        "0" => KeyCode::Digit0,
        "1" => KeyCode::Digit1,
        "2" => KeyCode::Digit2,
        "3" => KeyCode::Digit3,
        "4" => KeyCode::Digit4,
        "5" => KeyCode::Digit5,
        "6" => KeyCode::Digit6,
        "7" => KeyCode::Digit7,
        "8" => KeyCode::Digit8,
        "9" => KeyCode::Digit9,
        "equal" | "=" => KeyCode::Equal,
        "intlbackslash" => KeyCode::IntlBackslash,
        "intlro" => KeyCode::IntlRo,
        "intlyen" => KeyCode::IntlYen,
        "a" => KeyCode::KeyA,
        "b" => KeyCode::KeyB,
        "c" => KeyCode::KeyC,
        "d" => KeyCode::KeyD,
        "e" => KeyCode::KeyE,
        "f" => KeyCode::KeyF,
        "g" => KeyCode::KeyG,
        "h" => KeyCode::KeyH,
        "i" => KeyCode::KeyI,
        "j" => KeyCode::KeyJ,
        "k" => KeyCode::KeyK,
        "l" => KeyCode::KeyL,
        "m" => KeyCode::KeyM,
        "n" => KeyCode::KeyN,
        "o" => KeyCode::KeyO,
        "p" => KeyCode::KeyP,
        "q" => KeyCode::KeyQ,
        "r" => KeyCode::KeyR,
        "s" => KeyCode::KeyS,
        "t" => KeyCode::KeyT,
        "u" => KeyCode::KeyU,
        "v" => KeyCode::KeyV,
        "w" => KeyCode::KeyW,
        "x" => KeyCode::KeyX,
        "y" => KeyCode::KeyY,
        "z" => KeyCode::KeyZ,
        "minus" | "-" => KeyCode::Minus,
        "period" | "." => KeyCode::Period,
        "quote" | "'" => KeyCode::Quote,
        "semicolon" | ";" => KeyCode::Semicolon,
        "slash" | "/" => KeyCode::Slash,
        "altleft" => KeyCode::AltLeft,
        "altright" => KeyCode::AltRight,
        "backspace" => KeyCode::Backspace,
        "capslock" => KeyCode::CapsLock,
        "contextmenu" => KeyCode::ContextMenu,
        "controlleft" => KeyCode::ControlLeft,
        "controlright" => KeyCode::ControlRight,
        "enter" => KeyCode::Enter,
        "superleft" => KeyCode::SuperLeft,
        "superright" => KeyCode::SuperRight,
        "shiftleft" => KeyCode::ShiftLeft,
        "shiftright" => KeyCode::ShiftRight,
        "space" => KeyCode::Space,
        "tab" => KeyCode::Tab,
        "convert" => KeyCode::Convert,
        "kanamode" => KeyCode::KanaMode,
        "lang1" => KeyCode::Lang1,
        "lang2" => KeyCode::Lang2,
        "lang3" => KeyCode::Lang3,
        "lang4" => KeyCode::Lang4,
        "lang5" => KeyCode::Lang5,
        "nonconvert" => KeyCode::NonConvert,
        "delete" => KeyCode::Delete,
        "end" => KeyCode::End,
        "help" => KeyCode::Help,
        "home" => KeyCode::Home,
        "insert" => KeyCode::Insert,
        "pagedown" | "pgdown" => KeyCode::PageDown,
        "pageup" | "pgup" => KeyCode::PageUp,
        "arrowdown" | "down" => KeyCode::ArrowDown,
        "arrowleft" | "left" => KeyCode::ArrowLeft,
        "arrowright" | "right" => KeyCode::ArrowRight,
        "arrowup" | "up" => KeyCode::ArrowUp,
        "numlock" => KeyCode::NumLock,
        "numpad0" => KeyCode::Numpad0,
        "numpad1" => KeyCode::Numpad1,
        "numpad2" => KeyCode::Numpad2,
        "numpad3" => KeyCode::Numpad3,
        "numpad4" => KeyCode::Numpad4,
        "numpad5" => KeyCode::Numpad5,
        "numpad6" => KeyCode::Numpad6,
        "numpad7" => KeyCode::Numpad7,
        "numpad8" => KeyCode::Numpad8,
        "numpad9" => KeyCode::Numpad9,
        "numpadadd" => KeyCode::NumpadAdd,
        "numpadbackspace" => KeyCode::NumpadBackspace,
        "numpadclear" => KeyCode::NumpadClear,
        "numpadclearentry" => KeyCode::NumpadClearEntry,
        "numpadcomma" => KeyCode::NumpadComma,
        "numpaddecimal" => KeyCode::NumpadDecimal,
        "numpaddivide" => KeyCode::NumpadDivide,
        "numpadenter" => KeyCode::NumpadEnter,
        "numpadequal" => KeyCode::NumpadEqual,
        "numpadhash" => KeyCode::NumpadHash,
        "numpadmemoryadd" => KeyCode::NumpadMemoryAdd,
        "numpadmemoryclear" => KeyCode::NumpadMemoryClear,
        "numpadmemoryrecall" => KeyCode::NumpadMemoryRecall,
        "numpadmemorystore" => KeyCode::NumpadMemoryStore,
        "numpadmemorysubtract" => KeyCode::NumpadMemorySubtract,
        "numpadmultiply" => KeyCode::NumpadMultiply,
        "numpadparenleft" => KeyCode::NumpadParenLeft,
        "numpadparenright" => KeyCode::NumpadParenRight,
        "numpadstar" => KeyCode::NumpadStar,
        "numpadsubtract" => KeyCode::NumpadSubtract,
        "escape" => KeyCode::Escape,
        "fn" => KeyCode::Fn,
        "fnlock" => KeyCode::FnLock,
        "printscreen" => KeyCode::PrintScreen,
        "scrolllock" => KeyCode::ScrollLock,
        "pause" => KeyCode::Pause,
        "browserback" => KeyCode::BrowserBack,
        "browserfavorites" => KeyCode::BrowserFavorites,
        "browserforward" => KeyCode::BrowserForward,
        "browserhome" => KeyCode::BrowserHome,
        "browserrefresh" => KeyCode::BrowserRefresh,
        "browsersearch" => KeyCode::BrowserSearch,
        "browserstop" => KeyCode::BrowserStop,
        "eject" => KeyCode::Eject,
        "launchapp1" => KeyCode::LaunchApp1,
        "launchapp2" => KeyCode::LaunchApp2,
        "launchmail" => KeyCode::LaunchMail,
        "mediaplaypause" => KeyCode::MediaPlayPause,
        "mediaselect" => KeyCode::MediaSelect,
        "mediastop" => KeyCode::MediaStop,
        "mediatracknext" => KeyCode::MediaTrackNext,
        "mediatrackprevious" => KeyCode::MediaTrackPrevious,
        "power" => KeyCode::Power,
        "sleep" => KeyCode::Sleep,
        "audiovolumedown" => KeyCode::AudioVolumeDown,
        "audiovolumemute" => KeyCode::AudioVolumeMute,
        "audiovolumeup" => KeyCode::AudioVolumeUp,
        "wakeup" => KeyCode::WakeUp,
        "meta" => KeyCode::Meta,
        "hyper" => KeyCode::Hyper,
        "turbo" => KeyCode::Turbo,
        "abort" => KeyCode::Abort,
        "resume" => KeyCode::Resume,
        "suspend" => KeyCode::Suspend,
        "again" => KeyCode::Again,
        "copy" => KeyCode::Copy,
        "cut" => KeyCode::Cut,
        "find" => KeyCode::Find,
        "open" => KeyCode::Open,
        "paste" => KeyCode::Paste,
        "props" => KeyCode::Props,
        "select" => KeyCode::Select,
        "undo" => KeyCode::Undo,
        "hiragana" => KeyCode::Hiragana,
        "katakana" => KeyCode::Katakana,
        "f1" => KeyCode::F1,
        "f2" => KeyCode::F2,
        "f3" => KeyCode::F3,
        "f4" => KeyCode::F4,
        "f5" => KeyCode::F5,
        "f6" => KeyCode::F6,
        "f7" => KeyCode::F7,
        "f8" => KeyCode::F8,
        "f9" => KeyCode::F9,
        "f10" => KeyCode::F10,
        "f11" => KeyCode::F11,
        "f12" => KeyCode::F12,
        "f13" => KeyCode::F13,
        "f14" => KeyCode::F14,
        "f15" => KeyCode::F15,
        "f16" => KeyCode::F16,
        "f17" => KeyCode::F17,
        "f18" => KeyCode::F18,
        "f19" => KeyCode::F19,
        "f20" => KeyCode::F20,
        "f21" => KeyCode::F21,
        "f22" => KeyCode::F22,
        "f23" => KeyCode::F23,
        "f24" => KeyCode::F24,
        "f25" => KeyCode::F25,
        "f26" => KeyCode::F26,
        "f27" => KeyCode::F27,
        "f28" => KeyCode::F28,
        "f29" => KeyCode::F29,
        "f30" => KeyCode::F30,
        "f31" => KeyCode::F31,
        "f32" => KeyCode::F32,
        "f33" => KeyCode::F33,
        "f34" => KeyCode::F34,
        "f35" => KeyCode::F35,
        _ => return None,
    };
    Some(key)
}

#[test]
fn parse_shortcut() {
    use crate::shortcut::{KeyCombination, Modifiers, ShortcutKey};

    fn test(text: &str, modifiers: Modifiers, key: impl Into<ShortcutKey>, equality: bool) {
        let actual = KeyCombination::from_str_portable(text).unwrap();
        let expected = KeyCombination::new(modifiers, key);
        if equality {
            assert_eq!(
                actual, expected,
                "parse({:?}): expected {:?}, got {:?}",
                text, expected, actual
            );
        } else {
            assert_ne!(
                actual, expected,
                "parse({:?}) for nonequality: expected {:?}, got {:?}",
                text, expected, actual
            );
        }
    }

    fn test_eq(text: &str, modifiers: Modifiers, key: impl Into<ShortcutKey>) {
        test(text, modifiers, key, true);
    }

    test_eq("PageDown", Modifiers::empty(), Key::PageDown);
    test_eq("Left", Modifiers::empty(), Key::ArrowLeft);
    test_eq("Ctrl+Left", Modifiers::CTRL_OR_MAC_CMD, Key::ArrowLeft);
    test_eq(
        "Shift+Ctrl+Left",
        Modifiers::SHIFT | Modifiers::CTRL_OR_MAC_CMD,
        Key::ArrowLeft,
    );
    test_eq("Ctrl+X", Modifiers::CTRL_OR_MAC_CMD, KeyCode::KeyX);
    test_eq("Ctrl+ X", Modifiers::CTRL_OR_MAC_CMD, KeyCode::KeyX);
    test_eq("Ctrl + X", Modifiers::CTRL_OR_MAC_CMD, KeyCode::KeyX);
    test_eq(" Ctrl+X", Modifiers::CTRL_OR_MAC_CMD, KeyCode::KeyX);
    test_eq("   Ctrl + X    ", Modifiers::CTRL_OR_MAC_CMD, KeyCode::KeyX);

    fn test_ne(text: &str, modifiers: Modifiers, key: impl Into<ShortcutKey>) {
        test(text, modifiers, key, false);
    }

    test_ne("Ctrl+Left", Modifiers::META_OR_MAC_CTRL, Key::ArrowLeft);
    test_ne("PageDown", Modifiers::empty(), Key::PageUp);

    fn test_for_err(text: &str, err: &str) {
        let error = KeyCombination::from_str_portable(text).err().unwrap();
        assert_eq!(
            &error.to_string(),
            err,
            "parse({:?}): expected error {:?}, got {:?}",
            text,
            err,
            error
        );
    }

    test_for_err("", "unknown key");
    test_for_err("+Shift", "invalid format");
    test_for_err("Alt++Shift", "invalid format");
    test_for_err("Blabla+Shift", "unknown modifier");
    test_for_err("Shift+Anotherblabla", "unknown key");
}
